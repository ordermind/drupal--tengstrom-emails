<?php

declare(strict_types=1);

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\image\Entity\ImageStyle;
use Drupal\tengstrom_emails\EasyEmailTypeListBuilder;

/**
 * Implements hook_entity_type_alter().
 */
function tengstrom_emails_entity_type_alter(array &$entityTypes) {
  if (empty($entityTypes['easy_email_type'])) {
    return;
  }

  $entityTypes['easy_email_type']->setListBuilderClass(EasyEmailTypeListBuilder::class);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function tengstrom_emails_easy_email_type_access(EntityInterface $entity, string $operation, AccountInterface $account) {
  $operationPermissionMapping = [
    'preview' => 'preview email type entities',
    'update' => 'edit email type entities',
    'delete' => 'delete email type entities',
  ];

  foreach ($operationPermissionMapping as $operationName => $permission) {
    if ($operation === $operationName) {
      return $account->hasPermission($permission) ? AccessResult::allowed() : AccessResult::forbidden();
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 */
function tengstrom_emails_easy_email_type_create_access(AccountInterface $account, array $context, ?string $entityBundle) {
  return $account->hasPermission('add email type entities') ? AccessResult::allowed() : AccessResult::forbidden();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tengstrom_emails_form_easy_email_type_edit_form_alter(array &$form, FormStateInterface $formState, string $formId) {
  /** @var \Drupal\tengstrom_emails\HookHandlers\FormAlterHandlers\EasyEmailTypeEditFormAlterHandler $service */
  $service = \Drupal::service('tengstrom_emails.hook_handlers.easy_email_type_edit_form_alter');

  $service->alter($form, $formState, $formId);
}

/**
 * Afterbuild callback for bodyHtml element on easy email forms.
 */
function tengstrom_emails_easy_email_type_edit_form_body_html_afterbuild(array $element, FormStateInterface $formState) {
  if (!empty($element['format']['format']['#options']['e_mail'])) {
    $element['format']['format']['#options'] = [
      'e_mail' => $element['format']['format']['#options']['e_mail'],
    ];

    $element['format']['format']['#access'] = FALSE;
    $element['format']['guidelines']['#access'] = FALSE;
    $element['format']['help']['#access'] = FALSE;
    $element['format']['#attributes']['class'][] = 'hidden';
  }

  return $element;
}

/**
 * Implements template_preprocess_email_wrap().
 */
function tengstrom_emails_preprocess_email_wrap(array &$variables) {
  _tengstrom_emails_add_site_logo_to_emails($variables);
  _tengstrom_emails_add_footer_partial_to_emails($variables);
}

/**
 * Adds the e-mail logo as an e-mail template variable.
 */
function _tengstrom_emails_add_site_logo_to_emails(array &$variables) {
  $config = Drupal::config('tengstrom_configuration.settings');
  $logoFileUuid = $config->get('logo_email_uuid');
  if (!$logoFileUuid) {
    return;
  }

  $fileStorage = Drupal::service('entity_type.manager')->getStorage('file');
  $foundFiles = $fileStorage->loadByProperties(['uuid' => $logoFileUuid]);
  if (!$foundFiles) {
    return;
  }

  /** @var \Drupal\file\Entity\File $logoFile */
  $logoFile = reset($foundFiles);

  $getLogoVariables = function () use ($logoFile) {
    $imageStyle = ImageStyle::load('logo_in_email');
    if (!$imageStyle) {
      $imageSize = getimagesize($logoFile->getFileUri());
      return [
        'url' => $logoFile->createFileUrl(FALSE),
        'width' => $imageSize[0],
        'height' => $imageSize[1],
      ];
    }

    $styledImageUri = $imageStyle->buildUri($logoFile->uri->value);
    $styledImageUrl = $imageStyle->buildUrl($logoFile->uri->value);
    $imageStyle->createDerivative($logoFile->uri->value, $styledImageUri);
    $styledImageSize = getimagesize($styledImageUri);
    return [
      'url' => $styledImageUrl,
      'width' => $styledImageSize[0],
      'height' => $styledImageSize[1],
    ];
  };

  $variables['logo'] = $getLogoVariables();
}

/**
 * Makes the footer partial available in e-mails.
 */
function _tengstrom_emails_add_footer_partial_to_emails(array &$variables) {
  $footerPartial =
    Drupal::entityTypeManager()
      ->getStorage('partial')
      ->loadByProperties(['uuid' => '578f3d63-09be-477d-8438-f9e8e23a974c']);

  if (!$footerPartial) {
    return;
  }

  $footerPartial = reset($footerPartial);
  $viewBuilder = Drupal::entityTypeManager()->getViewBuilder('partial');
  $renderArray = $viewBuilder->view($footerPartial);
  $variables['footer'] = $renderArray;
}
